; PET/CBM - EDIT ROM - Keyboard scanning routine from CBM-II series (taken from actual sourcecode)
; ==================
; TODO: Change memory/storage to PET locations
; Comments in all caps are original commodore comments
; -------------------------------------------------------------------------------------------------

KEY
		LDY #$FF 					;SAY NO KEYS PRESSED (REAL-TIME KEYSCAN)
		STY MODKEY
		STY NORKEY
		INY 						;INIT BASE KYBD INDEX = 0
		STY TPI2+PB 				;ALLOW ALL OUTPUT LINES
		STY TPI2+PA
		JSR GETKEY 				;GET KEYBD INPUT
		AND #$3F					;CHECK IF ANY INPUTS
		EOR #$3F
		BNE BKEY01					;*+5 ;HOP OVER LONG BRANCH
		JMP NULXIT 				;EXIT IF NONE
BKEY01
		LDA #$FF
		STA TPI2+PA 				;ALLOW ONLY OUTPUT LINE 0
		ASL 
		STA TPI2+PB
		JSR GETKEY					;GET INPUT FROM LINE 0
		PHA 						;SAVE SHIFT & CONTROL BITS
		STA MODKEY					;SHIFT KEYS ARE DOWN
		ORA #$30					;MASK THEM BY SETTING BITS
		BNE LINE01
LINELP
		JSR GETKEY 				;GET LINE INPUTS
LINE01
		LDX #5					;LOOP FOR 6 INPUT LINES
KYLOOP
		LSR 						;CHECK LINE
		BCC HAVKEY 				;SKIP AHEAD IF HAVE INPUT
		INY 						;INC KEYD CODE COUNT
		DEX
		BPL KYLOOP
		SEC
		ROL TPI2+PB 				;ROTATE TO ACTIVATE NEXT
		ROL TPI2+PA 				; - OUTPUT LINE
		BCS LINELP 				;LOOP UNTIL ALL LINES DONE
		PLA 						;CLEAR SHIFT/CONTROL BYTE
		BCC NULXIT 				;EXIT IF NO KEY

;      GET PET-ASCII USING KEYBOARD INDEX
;      AND SHIFT AND CONTROL INPUTS

HAVKEY
		STY NORKEY 				;HAVE A NORMAL KEYPRESS
		LDX NORMTB,Y
		PLA						;GET SHIFT/CONTROL BYTE
		ASL
		ASL						;MOVE BITS LEFT
		ASL
		BCC DOCTL					;SKIP AHEAD IF CONTROL DEPRESSED
		BMI HAVASC 				;SKIP AHEAD IF NOT SHIFTED - HAVE ASCII
		LDX SHFTTB,Y				;ASSUME SHIFTED TEXTUAL
		LDA GRMODE					;TEST TEXT OR GRAPHIC MODE
		BEQ HAVASC					;HAVE KEY IF TEXT MODE
		LDX SHFTGR,Y				;GET SHIFTED GRAPHIC
		BNE HAVASC 				;GO PROCESS ASCII KEY
;
DOCTL
		LDX CTLTBL,Y				;GET PET-ASCII CHAR FOR THIS KEY
;
;     Y-REG HAS KEYBOARD INDEX VALUE
;     X-REG HAS PET-ASCII VALUE
;
HAVASC 	CPX #$FF
		BEQ KEYXIT 				;EXIT IF NULL PET-ASCII
		CPX #$E0 					;CHECK IF FUNCTION KEY
		BCC NOTFUN 				;SKIP - NOT A FUNCTION KEY
		TYA
		PHA
		JSR FUNJMP					;DO FUNCTION KEY INDIRECT
		PLA
		TAY
		BCS KEYXIT					;DONE IF CARRY FLAG SET
NOTFUN
		TXA						;GET PET-ASCII CODE
		CPY LSTX 					;CHECK IF SAME KEY AS LAST TIME THROUGH
		BEQ DORPT 					;SKIP AHEAD IF SO

;     A NEW KEY INPUT - CHECK QUEUE AVAILABILITY
;
		LDX #19
		STX DELAY					;RESET INITIAL DELAY COUNT
		LDX NDX 					;GET KEY-IN QUEUE SIZE
		CPX #KEYMAX				;CHECK IF QUEUE FULL
		BEQ NULXIT					;EXIT IF YES
		CPY #DBLZER				;CHECK IF KEYPAD - 00
		BNE SAVKEY					;GO SAVE KEY-IN IF NOT
		CPX #KEYMAX-1				;CHECK IF ROOM FOR TWO
		BEQ NULXIT					;EXIT IF NOT
		STA KEYD,X					;SAVE FIRST ZERO
		INX						;UPDATE QUEUE SIZE
		BNE SAVKEY					;ALWAYS
;
NULXIT	LDY #$FF
KEYXIT	STY LSTX					;SAVE LAST KEY NUMBER
KEYXT2	LDX #$7F
		STX TPI2+PA				;RESET OUTPUT LINES TO ALLOW
		LDX #$FF					;- STOP KEY INPUT
		STX TPI2+PB
		RTS
;
;     CHECK REPEAT DELAYS
;
DORPT
		DEC DELAY					;DEC INITIAL DELAY COUNT
		BPL KEYXT2					;EXIT IF WAS NOT ZERO - STILL ON 1ST DELAY
		INC DELAY					; - ELSE RESET COUNT TO ZERO
;
;     CHECK IF SECONDARY COUNT DOWN TO ZERO
;
		DEC RPTCNT					;DEC REPEAT BTWN KEYS
		BPL KEYXT2					;EXIT IF WAS NOT ZERO - STILL ON DELAY
		INC RPTCNT					;RESET BACK TO ZERO
;
;     TIME TO REPEAT - CHECK IF KEY QUEUE EMPTY
;
		LDX NDX					;GET KYBD QUEUE SIZE
		BNE KEYXT2					;EXIT IF KYBD QUEUE NOT EMPTY
;
;     SAVE PET-ASCII INTO KEY BUFFER
;
SAVKEY
		STA KEYD,X					;STORE PET-ASCII IN KYBD BUFFER
		INX
		STX NDX
		LDX #3
		STX RPTCNT					;RESET DELAY BTWN KEYS
		BNE KEYXIT
;
GETKEY
		LDA TPI2+PC				;DEBOUNCE KEYBOARD INPUT
		CMP TPI2+PC
		BNE GETKEY
		RTS
;
FUNJMP
		JMP (FUNVEC)				;FUNCTION KEY INDIRECT
;
DOKEYF	CPY LSTX
		BEQ FUNRTS					;EXIT NOT ALLOWED TO REPEAT
		LDA NDX
		ORA KYNDX
		BNE FUNRTS					;EXIT - FUNCTION QUEUE NOT EMPTY
		STA KEYIDX					;INIT POINTER INDEX INTO FUNCTION AREA
		TXA
		AND #$1F					;MASK OUT TO GET FUNCTION KEY NUMBER
		TAY
		LDA KEYSIZ,Y				;GET FUNCTION KEY SIZE
		STA KYNDX					;- AND STORE IT FOR KEY SCAN
		JSR FINDKY
		STA KEYPNT					;GET FUNCTION START ADDR
		STX KEYPNT+1				;- AND SAVE IN KEYPNT
FUNRTS
		SEC
		RTS

;
;   FIND ADDRESS OF FUNCTION KEY GIVEN IN Y-REG
;
FINDKY	LDA PKYBUF
		LDX PKYBUF+1

FINDLP	CLC
		DEY 						;FOUND KEY YET?
		BMI FNDOUT					;YES - DONE
		ADC KEYSIZ,Y				;ADD FUNCTION KEY SIZE
		BCC FINDLP					;LOOP IF NO HIGH BYTE CARRY-OVER
		INX
		BNE FINDLP					;LOOP - ALWAYS

FNDOUT
		RTS
;
;TAB SET-UP (TAB POSITIONER)
; Y=COLUMN IN QUESTION
;
GETTAB
		TYA						;GET BIT IN QUESTION
		AND #$07
		TAX
		LDA BITS,X
		STA BITMSK
		TYA						;GET 8 BIT BLOCK
		LSR
		LSR
		LSR
		TAX
		LDA TAB,X
		BIT BITMSK					;SET EQUAL FLAG
		RTS

