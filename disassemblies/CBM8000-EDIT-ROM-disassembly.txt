; Commodore PET EDIT ROM for 80 column  - Updated comments by Steve Gray, Jan 2013
; ====================================
; 
; ------------- EDIT ROM JUMP TABLE

 E000	iE000	JMP $E04B	; Main Initialization (called from Kernal power up reset $FD16)
 E003		JMP $E0A7	; Get Character From Keyboard Buffer
 E006		JMP $E116	; Input From Screen or Keyboard
 E009		JMP $E202	; Output to Screen
 E00C		JMP $E442	; Main IRQ Handler (this is hardcoded in kernal $FFFE!)
 E00F		JMP $E455	; Actual IRQ (clock, keyboard scan)
 E012		JMP $E600	; Return From Interrupt
 E015		JMP $E051	; Clear Screen
 E018		JMP $E07A	; Initialize CRTC to TEXT mode
 E01B		JMP $E082	; Initialize CRTC to GRAPHICS mode
 E01E		JMP $E088       ; Initialize CRTC (table ptr in A/X, chr set in Y)
 E021		JMP $E3C8	; Scroll Down
 E024		JMP $E3E8	; Scroll Screen
 E027		JMP $E4BE	; Scan Keyboard
 E02A		JMP $E6A7	; Ring BELL
 E02D		JMP $E036	; Set REPEAT Flag
 E030		JMP $E1E1	; Set Window Top
 E033		JMP $E1DC	; Set Window Bottom

;-------------- Set REPEAT Flag

 E036	iE036	STA $E4		; 4.80: Flag: REPEAT Key Used, $80 = Repeat, $40 = disable
 E038		RTS

 E039		.byte AA AA AA AA AA AA AA AA  ;........
 E041		.byte AA AA AA AA AA AA AA AA  ;........
 E049		.byte AA AA                    ;..

;-------------- Initialization (called from $E000)

 E04B	iE04B	JSR $E60F	; Initialize I/O
 E04E		JSR $E07A	; Initialize CRTC

;-------------- Clear Screen   (called from $E015)

 E051	iE051	LDX $E0		; Screen Line Link Table / Editor Temps
 E053		DEX
 E054	iE054	INX
 E055		JSR $E06C
 E058		JSR $E1C1	; Clear Screen Line
 E05B		CPX $E1		; Last line of window
 E05D		BCC $E054
 E05F	iE05F	LDX $E0		; Screen Line Link Table / Editor Temps
 E061		STX $D8		; Current Cursor Physical Line Number
 E063	iE063	LDY $E2		; First column of window
 E065		STY $C6		; Cursor Column on Current Line

;-------------- Set Screen Pointers

 E067	iE067	LDX $D8		; Current Cursor Physical Line Number
 E069		JMP $E06F

 E06C	iE06C	LDY $E2		; First column of window
 E06E		DEY
 
 E06F	iE06F	LDA $E755,X	; Screen Line Addresses LO		DATA
 E072		STA $C4		; Pointer: Current Screen Line Address LO
 E074		LDA $E76E,X	; Screen Line Addresses HI		DATA
 E077		STA $C5         ; Pointer: Current Screen Line Address HI
 E079		RTS

;-------------- Initialize CRTC to TEXT Mode

 E07A	iE07A	LDA #$2A        ; Point to DATA TABLE at $E72A
 E07C		LDX #$E7        ; Point to DATA TABLE at $E72A
 E07E		LDY #$0E        ; 
 E080		BNE $E088

;-------------- Initialize CRTC to GRAPHICS Mode

 E082	iE082	LDA #$3C        ; Point to DATA TABLE at $E73C
 E084		LDX #$E7        ; Point to DATA TABLE at $E73C
 E086		LDY #$0C	;

;-------------- Initialize CRTC (table pointer in A/X, character set in Y)
; First handle the character set selection...
 E088	iE088	STA $C7		; Pointer LO: Tape Buffer/ Screen Scrolling
 E08A		STX $C8         ; Pointer HI
 E08C		LDA $E84C       ; Get current register byte VIA Register C - CA2	CHIP 
 E08F		AND #$F0	; mask out lower nibble
 E091		STA $D1		; save it to Temp Variable (Length of Current File Name)
 E093		TYA		; Move character set byte to A
 E094		ORA $D1		; update lower nibble in Temp Variable (Length of Current File Name)
 E096		STA $E84C       ; write it back to VIA Register C - CA2		CHIP

; Now update all the CRTC registers from table...
 E099		LDY #$11        ; Number of bytes to copy = 17
 E09B	iE09B	LDA ($C7),Y	; Pointer: Tape Buffer/ Screen Scrolling
 E09D		STY $E880	; Select the register to update 6545/6845 CRT		CHIP
 E0A0		STA $E881       ; Write to the register
 E0A3		DEY         
 E0A4		BPL $E09B       ; loop for more
 E0A6		RTS

;-------------- Get Character From Keyboard Buffer - lp2

 E0A7	iE0A7	LDY $026F
 E0AA		LDX #$00
 E0AC	iE0AC	LDA $0270,X	; Keyboard Buffer Queue (FIFO)
 E0AF		STA $026F,X
 E0B2		INX
 E0B3		CPX $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E0B5		BNE $E0AC
 E0B7		DEC $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E0B9		TYA
 E0BA		CLI
 E0BB		RTS

;-------------- 
 E0BC	iE0BC	JSR $E68C
 E0BF	iE0BF	LDA $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E0C1		STA $A7		; Cursor Blink enable: 0 = Flash Cursor
 E0C3		BEQ $E0BF
 E0C5		SEI
 E0C6		LDA $AA		; Flag: Last Cursor Blink On/Off
 E0C8		BEQ $E0D3
 E0CA		LDA $A9		; Character Under Cursor
 E0CC		LDY #$00
 E0CE		STY $AA		; Flag: Last Cursor Blink On/Off
 E0D0		JSR $E606	; Put character on screen
 E0D3	iE0D3	JSR $E0A7	; Get Character From Keyboard Buffer (lp2)
 E0D6		CMP #$83
 E0D8		BNE $E0EA
 E0DA		SEI
 E0DB		LDX #$09
 E0DD		STX $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E0DF	iE0DF	LDA $E720,X
 E0E2		STA $026E,X
 E0E5		DEX
 E0E6		BNE $E0DF
 E0E8		BEQ $E0BF
 E0EA	iE0EA	CMP #$0D        ; <CR> CARRIAGE RETURN
 E0EC		BNE $E0BC
 E0EE		LDY $D5		; Physical Screen Line Length
 E0F0		STY $AC		; Flag: INPUT or GET from Keyboard
 E0F2	iE0F2	LDA ($C4),Y	; Pointer: Current Screen Line Address
 E0F4		CMP #$20
 E0F6		BNE $E0FB
 E0F8		DEY
 E0F9		BNE $E0F2
 E0FB	iE0FB	INY
 E0FC		STY $A1		; Pointer: End of Logical Line for INPUT
 E0FE		JSR $E1CB	; Goto Left Border
 E101		NOP
 E102		STY $CD		; Flag: Editor in Quote Mode, $00 = NO
 E104		LDA $A3		; Cursor Y-X Pos. at Start of INPUT
 E106		BMI $E121
 E108		CMP $D8		; Current Cursor Physical Line Number
 E10A		BNE $E121
 E10C		LDA $A4
 E10E		STA $C6		; Cursor Column on Current Line
 E110		CMP $A1		; Pointer: End of Logical Line for INPUT
 E112		BCC $E121
 E114		BCS $E144

;-------------- Input From Screen or Keyboard

 E116	iE116	TYA
 E117		PHA
 E118		TXA
 E119		PHA
 E11A		JMP ($00E9)	; Input from screen vector (from E006)
 E11D		LDA $AC		; Flag: INPUT or GET from Keyboard
 E11F		BEQ $E0BF
 E121	iE121	LDY $C6		; Cursor Column on Current Line
 E123		LDA ($C4),Y	; Pointer: Current Screen Line Address
 E125		STA $D9		; Current Character to Print
 E127		AND #$3F
 E129		ASL $D9		; Current Character to Print
 E12B		BIT $D9
 E12D		BPL $E131
 E12F		ORA #$80
 E131	iE131	BCC $E137
 E133		LDX $CD		; Flag: Editor in Quote Mode, $00 = NO
 E135		BNE $E13B
 E137	iE137	BVS $E13B
 E139		ORA #$40
 E13B	iE13B	INC $C6		; Cursor Column on Current Line
 E13D		JSR $E16A	; check For Quotes
 E140		CPY $A1		; Pointer: End of Logical Line for INPUT
 E142		BNE $E15B
 E144	iE144	LDA #$00
 E146		STA $AC		; Flag: INPUT or GET from Keyboard
 E148		LDA #$0D
 E14A		LDX $AF		; Default Input Device (0)
 E14C		CPX #$03
 E14E		BEQ $E156
 E150		LDX $B0		; Default Output (CMD) Device (3)
 E152		CPX #$03
 E154		BEQ $E159
 E156	iE156	JSR $E202	; Output to Screen
 E159	iE159	LDA #$0D
 E15B	iE15B	STA $D9		; Current Character to Print
 E15D		PLA
 E15E		TAX
 E15F		PLA
 E160		TAY
 E161		LDA $D9		; Current Character to Print
 E163		CMP #$DE
 E165		BNE $E169
 E167		LDA #$FF
 E169	iE169	RTS


;-------------- Check For Quotes

 E16A	iE16A	CMP #$22        ; Code: 22 = QUOTE
 E16C		BNE $E176       ; no, exit

 E16E		LDA $CD		; Flag: Editor in Quote Mode, $00 = NO
 E170		EOR #$01
 E172		STA $CD		; Flag: Editor in Quote Mode, $00 = NO
 E174		LDA #$22
 E176	iE176	RTS


;-------------- Ascii to Screen Code

 E177	iE177	ORA #$40
 E179	iE179	LDX $9F		; Flag: Print Reverse Chars. -1=Yes, 0=No Used
 E17B		BEQ $E17F
 E17D	iE17D	ORA #$80
 E17F	iE17F	LDX $DC		; Flag: Insert Mode, >0 = # INSTs
 E181		BEQ $E185
 E183		DEC $DC		; Flag: Insert Mode, >0 = # INSTs
 E185	iE185	JSR $E606	; Put character on screen
 E188		INC $C6		; Cursor Column on Current Line
 E18A		LDY $D5		; Physical Screen Line Length
 E18C		CPY $C6		; Cursor Column on Current Line
 E18E		BCS $E199
 E190		LDX $D8		; Current Cursor Physical Line Number
 E192	iE192	JSR $E3A3	; -	Go to Next Line
 E195		LDY $E2		; First column of window
 E197		STY $C6		; Cursor Column on Current Line

 E199	iE199	LDA #$00
 E19B		STA $E8		; Home Count
 E19D	iE19D	PLA
 E19E		TAY
 E19F		LDA $DC		; Flag: Insert Mode, >0 = # INSTs
 E1A1		BEQ $E1A5
 E1A3		LSR $CD		; Flag: Editor in Quote Mode, $00 = NO
 E1A5	iE1A5	PLA
 E1A6		TAX
 E1A7		PLA
 E1A8		CLI
 E1A9		RTS

 E1AA	iE1AA	LDY $D5		; Physical Screen Line Length
 E1AC		LDX $E0		; Screen Line Link Table / Editor Temps
 E1AE		CPX $D8		; Current Cursor Physical Line Number
 E1B0		BCC $E1BA
 E1B2		LDY $E2		; First column of window
 E1B4		STY $C6		; Cursor Column on Current Line
 E1B6		PLA
 E1B7		PLA
 E1B8		BNE $E199
 E1BA	iE1BA	DEC $D8		; Current Cursor Physical Line Number
 E1BC		STY $C6		; Cursor Column on Current Line
 E1BE		JMP $E067	; Set Screen Pointers


;-------------- Clear Screen Line

 E1C1	iE1C1	LDA #$20
 E1C3	iE1C3	INY
 E1C4		STA ($C4),Y	; Pointer: Current Screen Line Address
 E1C6		CPY $D5		; Physical Screen Line Length
 E1C8		BCC $E1C3
 E1CA		RTS


;-------------- Goto Left Border

 E1CB	iE1CB	LDY $E2		; First column of window
 E1CD		STY $C6		; Cursor Column on Current Line
 E1CF		LDY #$00
 E1D1		RTS


;-------------- Exit Window (Set Screen to Maximum Size, ie: 80x25)

 E1D2	iE1D2	LDA #$00        ; Top Left at 0,0
 E1D4		TAX
 E1D5		JSR $E1E1	; Set Window Top
 E1D8		LDA #$18        ; SCREEN SIZE, LINES = $18 (0-24)
 E1DA		LDX #$4F        ; SCREEN SIZE, WIDTH = $4F (0-79)

;-------------- Set Window Bottom

 E1DC	iE1DC	STA $E1		; Last line of window
 E1DE		STX $D5		; Physical Screen Line Length
 E1E0		RTS

;-------------- Set Window Top

 E1E1	iE1E1	STA $E0		; Screen Line Link Table / Editor Temps
 E1E3		STX $E2		; First column of window
 E1E5		RTS


; Unused					EMPTY

 E1E6		.byte AA AA AA AA AA AA AA AA  ;........
 E1EE		.byte AA AA AA AA AA AA AA AA  ;........
 E1F6		.byte AA AA AA AA AA AA AA AA  ;........
 E1FE		.byte AA AA AA AA              ;....


;-------------- Output to Screen (Called from CHROUT in KERNAL)
;               ***** THIS ENTRY POINT MUST NOT MOVE!!! *****

 E202	iE202	PHA
 E203		STA $D9		; Current Character to Print
 E205		TXA
 E206		PHA
 E207		TYA
 E208		PHA
 E209		JMP ($00EB)	; Print to screen vector (from E009) [E20C]

;--------------  Output to Screen Vector points here

 E20C		LDA #$00
 E20E		STA $AC		; Flag: INPUT or GET from Keyboard
 E210		LDY $C6		; Cursor Column on Current Line
 E212		LDA $D9		; Current Character to Print
 E214		AND #$7F
 E216		CMP #$1B        ; Code: 1B = ESCAPE
 E218		BNE $E21D
 E21A		JMP $E3BD       ; Cancel RVS/INS/QUOTE modes

 E21D	iE21D	LDA $D9		; Current Character to Print
 E21F		BPL $E224	; -unshifted characters-
 E221		JMP $E2F4	; -shifted characters-

; ------------- HANDLE unshifted characters 

 E224	iE224	CMP #$0D        ; Code: 0D = CARRIAGE RETURN
 E226		BNE $E22B
 E228		JMP $E3B6	; Output <CR>
 E22B	iE22B	CMP #$20        ; Code: 20 = SPACE
 E22D		BCC $E237
 E22F		AND #$3F
 E231		JSR $E16A	; Check For Quotes
 E234		JMP $E179
 E237	iE237	LDX $DC		; Flag: Insert Mode, >0 = # INSTs
 E239		BEQ $E23E
 E23B		JMP $E17D
 E23E	iE23E	CMP #$14        ; Code: 14 = DELETE
 E240		BNE $E262
 E242		LDY $E2		; First column of window
 E244		CPY $C6		; Cursor Column on Current Line
 E246		BCC $E24D
 E248		JSR $E1AA
 E24B		BNE $E25C
 E24D	iE24D	DEC $C6		; Cursor Column on Current Line
 E24F		LDY $C6		; Cursor Column on Current Line
 E251	iE251	INY
 E252		LDA ($C4),Y	; Pointer: Current Screen Line Address
 E254		DEY
 E255		STA ($C4),Y	; Pointer: Current Screen Line Address
 E257		INY
 E258		CPY $D5		; Physical Screen Line Length
 E25A		BNE $E251

;-------------- 80240.PRG jumps here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 E25C	iE25C	LDA #$20
 E25E		STA ($C4),Y	; Pointer: Current Screen Line Address
 E260		BNE $E299
 E262	iE262	LDX $CD		; Flag: Editor in Quote Mode, $00 = NO
 E264		BEQ $E269
 E266		JMP $E17D
 E269	iE269	CMP #$12        ; Code: 12 = REVERSE
 E26B		BNE $E26F
 E26D		STA $9F		; Flag: Print Reverse Chars. -1=Yes, 0=No Used
 E26F	iE26F	CMP #$13        ; Code: 13 = HOME
 E271		BNE $E283
 E273		LDA $E8		; Home Count
 E275		BPL $E27B
 E277		JSR $E1D2	; Exit Window
 E27A		CLC
 E27B	iE27B	ROR $E8		; Home Count
 E27D		JSR $E05F
 E280		JMP $E19D
 E283	iE283	CMP #$1D        ; Code: 1D = CURSOR RIGHT
 E285		BNE $E292
 E287		INY
 E288		STY $C6		; Cursor Column on Current Line
 E28A		DEY
 E28B		CPY $D5		; Physical Screen Line Length
 E28D		BCC $E299
 E28F		JMP $E192
 E292	iE292	CMP #$11        ; Code: 11 = CURSOR DOWN
 E294		BNE $E29C
 E296		JSR $E3A3	; Go to Next Line
 E299	iE299	JMP $E199
 E29C	iE29C	CMP #$09        ; Code: 09 = TAB
 E29E		BNE $E2D0
 E2A0		JSR $E570	; ?
 E2A3	iE2A3	LDY $033A	; temp var (Tape I/O Buffer #2)
 E2A6		INC $033A	; temp var (Tape I/O Buffer #2)
 E2A9		CPY $D5		; Physical Screen Line Length
 E2AB		BCC $E2B6
 E2AD		LDA $D5		; Physical Screen Line Length
 E2AF		STA $C6		; Cursor Column on Current Line
 E2B1		DEC $033A	; temp var (Tape I/O Buffer #2)
 E2B4		BNE $E299
 E2B6	iE2B6	ASL $033E	; temp var (DOS 8-bit syntax checking flag)
 E2B9		BNE $E2C5
 E2BB		INX
 E2BC		CPX #$0A
 E2BE		BEQ $E299
 E2C0		LDA #$01
 E2C2		STA $033E	; DOS 8-bit syntax checking flag
 E2C5	iE2C5	LDA $03EE,X	; Table of 80 bits to set TABs
 E2C8		AND $033E	; DOS 8-bit syntax checking flag
 E2CB		BEQ $E2A3
 E2CD		INY
 E2CE		STY $C6		; Cursor Column on Current Line
 E2D0	iE2D0	CMP #$16        ; Code: 16 = ERASE TO START
 E2D2		BNE $E2E0
 E2D4		LDA #$20        ; SPACE
 E2D6		DEY
 E2D7	iE2D7	INY
 E2D8		STA ($C4),Y	; Pointer: Current Screen Line Address
 E2DA		CPY $D5		; Physical Screen Line Length
 E2DC		BCC $E2D7
 E2DE		BCS $E299
 E2E0	iE2E0	CMP #$15        ; Code: 15 = DELETE LINE
 E2E2		BEQ $E2E7
 E2E4		JMP $E591	; continue additional checking...

 E2E7	iE2E7	LDA $E0		; Screen Line Link Table / Editor Temps
 E2E9		PHA
 E2EA		LDA $D8		; Current Cursor Physical Line Number
 E2EC		STA $E0		; Screen Line Link Table / Editor Temps
 E2EE		JSR $E3E8	; Scroll Screen
 E2F1		JMP $E5CA

; ------------- HANDLE shifted characters 

 E2F4	iE2F4	AND #$7F
 E2F6		CMP #$7F        ; special case: code for PI (7F)
 E2F8		BNE $E2FC
 E2FA		LDA #$5E        ; replace with screen code (5E)
 E2FC	iE2FC	CMP #$20        ; is code>32?
 E2FE		BCC $E303       ; no, skip over
 E300		JMP $E177	; yes, Ascii to Screen Code

 E303	iE303	CMP #$0D        ; Code: 0D = CARRIAGE RETURN (SHIFTED)
 E305		BNE $E30A
 E307		JMP $E3B6	; Output <CR>
 E30A	iE30A	LDX $CD		; Flag: Editor in Quote Mode, $00 = NO
 E30C		BNE $E342
 E30E		CMP #$14        ; Code: 14 = DELETE (shifted) = INSERT
 E310		BNE $E33E
 E312		LDY $D5		; Physical Screen Line Length
 E314		LDA ($C4),Y	; Pointer: Current Screen Line Address
 E316		CMP #$20        ; SPACE
 E318		BNE $E38C
 E31A		CPY $C6		; Cursor Column on Current Line
 E31C		BCC $E38C
 E31E		BEQ $E38C
 E320		LDY $D5		; Physical Screen Line Length
 E322	iE322	DEY
 E323		LDA ($C4),Y	; Pointer: Current Screen Line Address
 E325		INY
 E326		STA ($C4),Y	; Pointer: Current Screen Line Address
 E328		DEY
 E329		CPY $C6		; Cursor Column on Current Line
 E32B		BNE $E322
 E32D		LDA #$20
 E32F		STA ($C4),Y	; Pointer: Current Screen Line Address
 E331		LDA $D5		; Physical Screen Line Length
 E333		SEC
 E334		SBC $C6		; Cursor Column on Current Line
 E336		SBC $DC		; Flag: Insert Mode, >0 = # INSTs
 E338		BMI $E38C
 E33A		INC $DC		; Flag: Insert Mode, >0 = # INSTs
 E33C		BNE $E38C
 E33E	iE33E	LDX $DC		; Flag: Insert Mode, >0 = # INSTs
 E340		BEQ $E347
 E342	iE342	ORA #$40
 E344		JMP $E17D
 E347	iE347	CMP #$11        ; Code: 11 = CURSOR DOWN (shifted) = CURSOR UP
 E349		BNE $E358
 E34B		LDX $E0		; Screen Line Link Table / Editor Temps
 E34D		CPX $D8		; Current Cursor Physical Line Number
 E34F		BCS $E38C
 E351		DEC $D8		; Current Cursor Physical Line Number
 E353		JSR $E067	; Set Screen Pointers
 E356		BNE $E38C
 E358	iE358	CMP #$12        ; Code: 12 = REVERSE (shifted) = REVERSE OFF
 E35A		BNE $E360
 E35C		LDA #$00
 E35E		STA $9F		; Flag: Print Reverse Chars. -1=Yes, 0=No Used
 E360	iE360	CMP #$1D        ; Code: 1D = CURSOR RIGHT (shifted) = CURSOR LEFT
 E362		BNE $E373
 E364		LDY $E2		; First column of window
 E366		CPY $C6		; Cursor Column on Current Line
 E368		BCC $E36F
 E36A		JSR $E1AA
 E36D		BNE $E38C
 E36F	iE36F	DEC $C6		; Cursor Column on Current Line
 E371		BPL $E38C
 E373	iE373	CMP #$13        ; Code: 13 = HOME (shifted) = CLEAR SCREEN
 E375		BNE $E37C
 E377		JSR $E051	; Clear Screen
 E37A		BNE $E38C
 E37C	iE37C	CMP #$09        ; Code: 09 = TAB (shifted) = SET TAB
 E37E		BNE $E38F
 E380		JSR $E570	; calculate tab stop byte?
 E383		LDA $03EE,X	; Table of 80 bits to set TABs
 E386		EOR $033E	; invert bit? temp var (DOS 8-bit syntax checking flag)
 E389		STA $03EE,X	; Table of 80 bits to set TABs
 E38C	iE38C	JMP $E199
 E38F	iE38F	CMP #$16        ; Code: 16 = ERASE TO START (shifted) = ERASE TO END
 E391		BEQ $E396       ; yes, do it
 E393		JMP $E5BC       ; no, jump for more comparisons

;-------------- Erase to START of line

 E396	iE396	LDA #$20        ; SPACE character
 E398		LDY $E2		; First column of window

 E39A	iE39A	CPY $C6		; Cursor Column on Current Line
 E39C		BCS $E38C
 E39E		STA ($C4),Y	; Write a SPACE.Pointer: Current Screen Line Address
 E3A0		INY             ; move to next position 
 E3A1		BNE $E39A       ; loop back for more


;-------------- Go to Next Line

 E3A3	iE3A3	LSR $A3		; Cursor Y-X Pos. at Start of INPUT
 E3A5		LDX $D8		; Current Cursor Physical Line Number
 E3A7		CPX $E1		; Last line of window
 E3A9		BCC $E3B1
 E3AB		JSR $E3E8	; Scroll Screen
 E3AE		JMP $E067	; Set Screen Pointers
 E3B1	iE3B1	INC $D8		; Current Cursor Physical Line Number
 E3B3		JMP $E067	; Set Screen Pointers


;-------------- Output Carriage Return <CR>

 E3B6	iE3B6	LDY $E2		; First column of window
 E3B8		STY $C6		; Cursor Column on Current Line
 E3BA		JSR $E3A3	; Go to Next Line

;-------------- Clear INSERT, REVERSE and QUOTE mode (called via ESC key)

 E3BD	iE3BD	LDA #$00
 E3BF		STA $DC		; Flag: Insert Mode, >0 = # INSTs
 E3C1		STA $9F		; Flag: Print Reverse Chars. -1=Yes, 0=No Used
 E3C3		STA $CD		; Flag: Editor in Quote Mode, $00 = NO
 E3C5		JMP $E199


;-------------- Scroll DOWN

 E3C8	iE3C8	LDX $E1		; Last line of window
 E3CA		INX
 E3CB	iE3CB	DEX
 E3CC		JSR $E06C       ; Set screen pointers ($C4/C5)
 E3CF		CPX $E0		; Screen Line Link Table / Editor Temps
 E3D1		BEQ $E408
 E3D3		LDA $E754,X     ; Screen Line address table LO - 1
 E3D6		STA $C7		; Pointer: Tape Buffer/ Screen Scrolling
 E3D8		LDA $E76D,X     ; Screen Line address table HI - 1
 E3DB		STA $C8
 E3DD	iE3DD	INY
 E3DE		LDA ($C7),Y	; Pointer: Tape Buffer/ Screen Scrolling
 E3E0		STA ($C4),Y	; Pointer: Current Screen Line Address
 E3E2		CPY $D5		; Physical Screen Line Length
 E3E4		BCC $E3DD
 E3E6		BCS $E3CB


;-------------- Scroll Screen

 E3E8	iE3E8	LDX $E0		; Screen Line Link Table / Editor Temps
 E3EA		DEX
 E3EB	iE3EB	INX
 E3EC		JSR $E06C
 E3EF		CPX $E1		; last line of window
 E3F1		BCS $E408
 E3F3		LDA $E756,X
 E3F6		STA $C7		; Pointer: Tape Buffer/ Screen Scrolling
 E3F8		LDA $E76F,X
 E3FB		STA $C8
 E3FD	iE3FD	INY
 E3FE		LDA ($C7),Y	; Pointer: Tape Buffer/ Screen Scrolling
 E400		STA ($C4),Y	; Pointer: Current Screen Line Address
 E402		CPY $D5		; Physical Screen Line Length
 E404		BCC $E3FD
 E406		BCS $E3EB

 E408	iE408	JSR $E1C1	; Clear Screen Line
 E40B		LDA $E812       ; PIA#1, Register 2 - Keyboard ROW input
 E40E		CMP #$FE        ; Is BIT 0 set? ie: key held down?
 E410		BNE $E420       ; no, skip scroll delay loop

;--------------- Scroll Delay and Pause

 E412		LDY #$00        ; Scroll delay
 E414	iE414	NOP
 E415		DEX
 E416		BNE $E414       ; Loop back
 E418		DEY
 E419		BNE $E414       ; Loop back
 E41B	iE41B	LDY #$00        ; Clear keyboard buffer
 E41D		STY $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E41F	iE41F	RTS

 E420	iE420	CMP #$DF        ; Is BIT 1 set? key held down?
 E422		BNE $E41F       ; no, return
 E424	iE424	LDA $E812       ; PIA#1, Register 2 - Keyboard ROW input
 E427		CMP #$DF        ; Is BIT 1 set? key held down?
 E429		BEQ $E424       ; yes, loop back
 E42B		CMP #$FF        ; no keys?
 E42D		BEQ $E424       ; yes, loop back
 E42F		BNE $E41B       ; return back up to clear buffer

;-------------- Patch for 50 Hz

 E431	iE431	JSR $FFEA	; jmp $f768	udtim	Update System Jiffy Clock
 E434		INC $F8		; Counter to speed TI by 6/5
 E436		LDA $F8		; Counter to speed TI by 6/5
 E438		CMP #$06        ; every 6 IRQ's
 E43A		BNE $E458       ; no, jump back to IRQ routine
 E43C		LDA #$00        ; yes, reset counter
 E43E		STA $F8		; Counter to speed TI by 6/5
 E440		BEQ $E431       ; re-do jiffy clock update


;-------------- Main IRQ Entry Point (Called from KERNAL vector at $FFFE !!!!)
;               ***** THIS ENTRY POINT MUST NOT MOVE!!! *****
 E442	iE442	PHA
 E443		TXA
 E444		PHA
 E445		TYA
 E446		PHA
 E447		TSX
 E448		LDA $0104,X
 E44B		AND #$10
 E44D		BEQ $E452
 E44F		JMP ($0092)	; Vector: BRK Instr. Interrupt [D478]
 E452	iE452	JMP ($0090)	; Vector: Hardware Interrupt   [E455]


;-------------- HARDWARE INTERRUPT - Update Clock

 E455	iE455	JMP $E431       ; Update Jiffy Clock PATCH for 50Hz

;-------------- 

 E458	iE458	LDA $A7		; Cursor Blink enable: 0 = Flash Cursor
 E45A		BNE $E47A       ; skip it
 E45C		DEC $A8		; Timer: Countdown to Toggle Cursor
 E45E		BNE $E47A       ; skip it
 E460		LDA #$14
 E462		BIT $E4
 E464		BPL $E468
 E466		LDA #$02
 E468	iE468	STA $A8		; Timer: Countdown to Toggle Cursor
 E46A		LDY $C6		; Cursor Column on Current Line
 E46C		LSR $AA		; Flag: Last Cursor Blink On/Off
 E46E		LDA ($C4),Y	; Pointer: Current Screen Line Address
 E470		BCS $E476
 E472		INC $AA		; Flag: Last Cursor Blink On/Off
 E474		STA $A9		; Character Under Cursor
 E476	iE476	EOR #$80	; Toggle the Reverse bit
 E478		STA ($C4),Y	; Pointer: Current Screen Line Address
 
 E47A	iE47A	LDY #$00
 E47C		LDA $E810	; PIA#1, Register 0 				CHIP
 E47F		AND #$F0
 E481		STA $E810	; PIA#1, Register 0				CHIP
 E484		LDA $E810	; PIA#1, Register 0				CHIP
 E487		ASL
 E488		ASL
 E489		ASL
 E48A		BPL $E495
 E48C		STY $F9		; Tape Motor Interlock #1
 E48E		LDA $E813       ; PIA#1, Register 3				CHIP
 E491		ORA #$08
 E493		BNE $E49E
 E495	iE495	LDA $F9		; Tape Motor Interlock #1
 E497		BNE $E4A1
 E499		LDA $E813
 E49C		AND #$F7
 E49E	iE49E	STA $E813	; PIA#1, Register 3				CHIP
 E4A1	iE4A1	BCC $E4AC
 E4A3		STY $FA		; Tape Motor Interlock #2
 E4A5		LDA $E840	; VIA, Register 0				CHIP
 E4A8		ORA #$10
 E4AA		BNE $E4B5
 E4AC	iE4AC	LDA $FA		; Tape Motor Interlock #2
 E4AE		BNE $E4B8
 E4B0		LDA $E840	; VIA, Register 0				CHIP
 E4B3		AND #$EF
 E4B5	iE4B5	STA $E840	; VIA, Register 0				CHIP
 E4B8	iE4B8	JSR $E4BE	; Scan Keyboard
 E4BB		JMP $E600	; Return From Interrupt


;--------------- Scan Keyboard (scnkey)

 E4BE	iE4BE	LDY #$FF
 E4C0		STY $A6		; Key Image
 E4C2		INY
 E4C3		STY $98		; Flag: Print Shifted Chars.
 E4C5		LDA $E4		; Flag: REPEAT Key Used, $80 = Repeat, $40 = disable
 E4C7		AND #$7F
 E4C9		STA $E4		; Flag: REPEAT Key Used, $80 = Repeat, $40 = disable
 E4CB		LDX #$50
 E4CD	iE4CD	LDY #$08
 E4CF		LDA $E812
 E4D2		CMP $E812
 E4D5		BNE $E4CD
 E4D7	iE4D7	LSR
 E4D8		BCS $E4F9
 E4DA		PHA
 E4DB		LDA $E6D0,X
 E4DE		BNE $E4E6
 E4E0		LDA #$01
 E4E2		STA $98		; Flag: Print Shifted Chars.
 E4E4		BNE $E4F8
 E4E6	iE4E6	CMP #$10
 E4E8		BNE $E4F2
 E4EA		LDA $E4		; Flag: REPEAT Key Used, $80 = Repeat, $40 = disable
 E4EC		ORA #$80
 E4EE		STA $E4		; Flag: REPEAT Key Used, $80 = Repeat, $40 = disable
 E4F0		BMI $E4F8
 E4F2	iE4F2	CMP #$FF
 E4F4		BEQ $E4F8
 E4F6		STA $A6		; Key Image
 E4F8	iE4F8	PLA
 E4F9	iE4F9	DEX
 E4FA		BEQ $E504	; Process Key Image
 E4FC		DEY
 E4FD		BNE $E4D7
 E4FF		INC $E810	; PIA 1						CHIP
 E502		BNE $E4CD


;-------------- Process Key Image

 E504	iE504	LDA $A6		; Key Image
 E506		CMP $97		; Current Key Pressed: 255 = No Key
 E508		BEQ $E510
 E50A		LDX #$10
 E50C		STX $E6		; Repeat Delay Counter
 E50E		BNE $E53F
 E510	iE510	BIT $E4
 E512		BMI $E532
 E514		BVS $E56F
 E516		CMP #$FF
 E518		BEQ $E56F
 E51A		CMP #$14
 E51C		BEQ $E52A
 E51E		CMP #$20
 E520		BEQ $E52A
 E522		CMP #$1D
 E524		BEQ $E52A
 E526		CMP #$11
 E528		BNE $E56F
 E52A	iE52A	LDX $E6		; Repeat Delay Counter
 E52C		BEQ $E532
 E52E		DEC $E6		; Repeat Delay Counter
 E530		BNE $E56F
 E532	iE532	DEC $E5		; Repeat Speed Counter
 E534		BNE $E56F
 E536		LDX #$04
 E538		STX $E5		; Repeat Speed Counter
 E53A		LDX $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E53C		DEX
 E53D		BPL $E56F
 E53F	iE53F	STA $97		; Current Key Pressed: 255 = No Key
 E541		CMP #$FF
 E543		BEQ $E56F
 E545		TAX
 E546		PHP
 E547		AND #$7F
 E549		PLP
 E54A		BMI $E563
 E54C		LSR $98		; Flag: Print Shifted Chars.
 E54E		BCC $E563
 E550		CMP #$2C
 E552		BCC $E561
 E554		CMP #$3C
 E556		BCS $E561
 E558		SBC #$0F
 E55A		CMP #$20
 E55C		BCS $E563
 E55E		ADC #$20
 E560		BIT $8009

 E563	iE563	LDX $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E565		CPX $E3		; Size of Keyboard Buffer
 E567		BCS $E56F
 E569		STA $026F,X
 E56C		INX
 E56D		STX $9E		; No. of Chars. in Keyboard Buffer (Queue)
 E56F	iE56F	RTS


; ? (SJG: Could be used for TAB STOPS)

 E570	iE570	LDA $C6		; Cursor Column on Current Line
 E572		AND #$F8
 E574		STA $033A	; temp storage - Tape I/O Buffer #2
 E577		LSR             ;
 E578		LSR             ;
 E579		LSR             ; divide by 8
 E57A		TAX
 E57B		LDA #$01
 E57D		STA $033E	; DOS 8-bit syntax checking flag
 E580		LDY $C6		; Cursor Column on Current Line
 E582	iE582	CPY $033A	; temp storage - Tape I/O Buffer #2
 E585		BEQ $E590
 E587		ASL $033E	; DOS 8-bit syntax checking flag
 E58A		INC $033A	; temp storage - Tape I/O Buffer #2
 E58D		JMP $E582
 E590	iE590	RTS


;-------------- More character code checking

 E591	iE591	CMP #$19        ; Code: 19 = SCROLL DOWN
 E593		BNE $E59B
 E595		JSR $E3E8	; Scroll Screen
 E598		JMP $E5D9       

 E59B	iE59B	CMP #$0F        ; Code: 0F = TOP LEFT
 E59D		BNE $E5AA       ; no, skip ahead
 E59F		LDA $D8		; Get Current Cursor Physical Line Number
 E5A1		STA $E0		; Copy it to Top of Window
 E5A3		LDA $C6		; Get Cursor Column on Current Line
 E5A5		STA $E2		; Copy it to First column of window
 E5A7	iE5A7	JMP $E199

 E5AA	iE5AA	CMP #$0E        ; Code: 0E = TEXT MODE
 E5AC		BNE $E5B3
 E5AE		JSR $E07A	; Initialize CRTC to TEXT mode
 E5B1		BMI $E5A7
 E5B3	iE5B3	CMP #$07        ; Code: 07 = BELL (shifted) = BELL (longer?)
 E5B5		BNE $E5A7
 E5B7		JSR $E6A7	; Ring BELL
 E5BA		BEQ $E5A7

;-------------- Continue checking codes... 

 E5BC	iE5BC	CMP #$15        ; Code: 15 = DELETE LINE (shifted) = INSERT LINE
 E5BE		BNE $E5D2       ; no, skip ahead
 E5C0		LDA $E0		; Screen Line Link Table / Editor Temps
 E5C2		PHA
 E5C3		LDA $D8		; Current Cursor Physical Line Number
 E5C5		STA $E0		; Screen Line Link Table / Editor Temps
 E5C7		JSR $E3C8	; SCROLL DOWN
 E5CA	iE5CA	PLA
 E5CB		STA $E0		; Screen Line Link Table / Editor Temps
 E5CD		JSR $E063
 E5D0		BNE $E5EA

 E5D2	iE5D2	CMP #$19        ; Code: 19 = SCROLL DOWN (shifted) = SCROLL UP
 E5D4		BNE $E5DE
 E5D6		JSR $E3C8	; SCROLL DOWN

 E5D9	iE5D9	JSR $E067	; Set Screen Pointers
 E5DC		BNE $E5EA

 E5DE	iE5DE	CMP #$0F        ; Code: 0F = TOP LEFT (SHIFTED) = BOTTOM RIGHT
 E5E0		BNE $E5ED       ; no, skip ahead
;                                 yes, set BOTTOM RIGHT
 E5E2		LDA $D8		; Get Current Cursor Physical Line Number
 E5E4		STA $E1		; Copy it to Last line of window
 E5E6		LDA $C6		; Get Cursor Column on Current Line
 E5E8		STA $D5		; Copy it to Physical Screen Line Length
 E5EA	iE5EA	JMP $E199

 E5ED	iE5ED	CMP #$0E        ; Code: 0E = TEXT MODE (shifted) = GRAPHICS MODE
 E5EF		BNE $E5B3
 E5F1		JSR $E082	; Initialize CRTC to GRAPHICS mode
 E5F4		BMI $E5EA       ;
 E5F6		TAX
 E5F7		TAX
 E5F8		TAX
 E5F9		TAX
 E5FA		TAX
 E5FB		TAX
 E5FC		TAX
 E5FD		TAX
 E5FE		TAX
 E5FF		TAX


;-------------- Return From Interrupt

 E600	iE600	PLA	;pull Y
 E601		TAY
 E602		PLA	;pull X
 E603		TAX
 E604		PLA     ;pull A
 E605		RTI


;-------------- Put Character on screen at current cursor position
;               reset cursor blink counter so cursor appears immediately
;
;               ***** THIS ENTRY POINT MUST NOT MOVE!!! ***** (Used in "80240.PRG")

 E606	iE606	LDY $C6		; Cursor Column on Current Line
 E608		STA ($C4),Y	; Pointer: Current Screen Line Address
 E60A		LDA #$02        ; Reset cursor blink counter so cursor appears ASAP
 E60C		STA $A8		; Timer: Countdown to Toggle Cursor
 E60E		RTS


;-------------- cint1	Initialize I/O

 E60F	iE60F	LDA #$7F
 E611		STA $E84E       ; VIA, Register E - I/O Timers		CHIP
 E614		LDX #$6D        ; X=109
 E616		LDA #$00        ; A=0
 E618		STA $E8		; Clear Home Count
 E61A		STA $E4		; Clear REPEAT ($80 = Repeat, $40 = disable)
 E61C	iE61C	STA $8D,X	; Clear Real-Time Jiffy Clock (approx) 1/60 Sec
 E61E		DEX
 E61F		BPL $E61C       ; loop to clear all 109 zero page locations

 E621		LDA #$55        ; $E455 - (Note: Execudesk changes this to $E900)
 E623		STA $90		; Vector: Hardware Interrupt [E455]
 E625		LDA #$E4
 E627		STA $91

 E629		LDA #$09        
 E62B		STA $E3		; Size of Keyboard Buffer

 E62D		LDA #$03
 E62F		STA $B0		; Default Output (CMD) Device (3)

 E631		LDA #$0F
 E633		STA $E810	; PIA#1, Register 0			CHIP
 E636		ASL
 E637		STA $E840	; VIA, Register 0 			CHIP
 E63A		STA $E842       ; VIA, Register 2 
 E63D		STX $E822       ; PIA#2, Register 2
 E640		STX $E845       ; VIA, Register 5

 E643		LDA #$3D
 E645		STA $E813       ; PIA#1, Register 3
 E648		BIT $E812       ; PIA#1, Register 2

 E64B		LDA #$3C
 E64D		STA $E821	; PIA#2, Register 1
 E650		STA $E823	; PIA#2, Register 3
 E653		STA $E811	; PIA#1, Register 1
 E656		STX $E822	; PIA#2, Register 2

 E659		LDA #$0E
 E65B		STA $A8		; Timer: Countdown to Toggle Cursor
 E65D		STA $A7		; Cursor Blink enable: 0 = Flash Cursor
 E65F		STA $E6		; Repeat Delay Counter
 E661		STA $E5		; Repeat Speed Counter
 E663		STA $E84E
 E666		JSR $E1D2	; Exit Window
 E669		LDX #$0C
 E66B		LDA #$00

 E66D	iE66D	STA $03EE,X	; Table of 80 bits to set TABs
 E670		DEX
 E671		BPL $E66D

 E673		LDA #$1D        ; Point to $E11D
 E675		LDX #$E1
 E677		STA $E9		; Input from screen vector (from E006)
 E679		STX $EA

 E67B		LDA #$0C        ; Point to $E20C
 E67D		LDX #$E2
 E67F		STA $EB		; Print to screen vector (from E009)
 E681		STX $EC
 E683		LDA #$10
 E685		STA $E7		; Chime Time
 E687		JSR $E6A4
 E68A		BEQ $E6A4

 E68C	iE68C	JSR $E202	; Output to Screen
 E68F		TAX
 E690		LDA $D5		; Physical Screen Line Length
 E692		SEC
 E693		SBC $C6		; Cursor Column on Current Line
 E695		CMP #$05        ; 5 characters from end of line
 E697		BNE $E6D0       ; exit

 E699		TXA
 E69A		CMP #$1D        ; Code: 1D = CURSOR RIGHT
 E69C		BEQ $E6A4
 E69E		AND #$7F
 E6A0		CMP #$20
 E6A2		BCC $E6D0       ; exit
 E6A4	iE6A4	JSR $E6A7	; RING BELL

;--------------- Ring the BELL

 E6A7	iE6A7	LDY $E7		; Chime Time
 E6A9		BEQ $E6D0       ; exit

 E6AB		LDA #$10
 E6AD		STA $E84B       ;VIA, Register B - shift register control	CHIP
 E6B0		LDA #$0F
 E6B2		STA $E84A       ;VIA, Register A - shift register		CHIP

 E6B5		LDX #$07
 E6B7	iE6B7	LDA $E74D,X	; Timer 2 LO Values			DATA
 E6BA		STA $E848       ; VIA, Register 8 - Timer 2 Lo			CHIP
 E6BD		LDA $E7		; Chime Time
 E6BF	iE6BF	DEY
 E6C0		BNE $E6BF       ; delay loop
 E6C2		SEC
 E6C3		SBC #$01
 E6C5		BNE $E6BF       ; delay loop
 E6C7		DEX
 E6C8		BNE $E6B7

 E6CA		STX $E84A       ;VIA Register 4A - shift register		CHIP
 E6CD		STX $E84B       ;VIA Register 4B - shift register control	CHIP
 E6D0	sE6D0	RTS


;--------------- Keyboard decoding table			DATA
; 00 = Shift , 10 = Repeat, 80 = Unshiftable, FF = No key

 E6D1		.byte 16 04 3A 03 39 36 33 DF  ;..:.963.
 E6D9		.byte B1 2F 15 13 4D 20 58 12  ;./..m x.
 E6E1		.byte B2 10 0F B0 2C 4E 56 5A  ;....,nvz
 E6E9		.byte B3 00 19 AE 2E 42 43 00  ;.....bc.
 E6F1		.byte B4 5D 4F 11 55 54 45 51  ;.]o.uteq
 E6F9		.byte 14 50 49 C0 59 52 57 09  ;.pi.yrw.
 E701		.byte B6 5B 4C 0D 4A 47 44 41  ;.[l.jgda
 E709		.byte B5 5C 4B 3B 48 46 53 9B  ;.\k;hfs.
 E711		.byte B9 06 DE B7 B0 37 34 31  ;.....741
 E719		.byte 05 0E 1D B8 2D 38 35 32  ;....-852

;--------------- SHIFT-RUN keystrokes for buffer 		DATA

 E721		.byte 44 CC 22 2A 0D 52 55 4E  ;dL"*.run
 E729		.byte 0D                       ;.


;--------------- Video Chip Setup Table - TEXT MODE 		DATA

 E72A		.byte 31 28 29 0F 27 00 19 20  ;1().'.. 
 E732		.byte 00 09 00 00 10 00 00 00  ;........
 E73A		.byte 00 00                    ;..


;--------------- Video Chip Setup Table - GRAPHICS MODE		DATA

 E73C		.byte 31 28 29 0F 31 00 19 25  ;1().1..%
 E744		.byte 00 07 00 00 10 00 00 00  ;........
 E74C		.byte 00                       ;.


;--------------- Timer 2 LO Values				DATA

 E74D	sE74D	.byte 00 0E 1E 3E 7E 3E 1E     ;...>~>.
 E754	sE754	.byte 0E                       ;.


;--------------- Screen Line Addresses LO			
 E755	sE755	.byte 00                       ;.
 E756	sE756	.byte 50 A0 F0 40 90 E0 30 80  ;p..@..0.
 E75E		.byte D0 20 70 C0 10 60 B0 00  ;P P..`..
 E766		.byte 50 A0 F0 40 90 E0 30     ;p..@..0
 E76D	sE76D	.byte 80                       ;.

;--------------- Screen Line Addresses HI			DATA

 E76E	sE76E	.byte 80                       ;.
 E76F	sE76F	.byte 80 80 80 81 81 81 82 82  ;........
 E777		.byte 82 83 83 83 84 84 84 85  ;........
 E77F		.byte 85 85 85 86 86 86 87 87  ;........
 E787		.byte BF                       ;.

;--------------- FILLER to END of 2K ROM

 E788		.byte AA AA AA AA AA AA AA AA  ;........
 E790		.byte AA AA AA AA AA AA AA AA  ;........
 E798		.byte AA AA AA AA AA AA AA AA  ;........
 E7A0		.byte AA AA AA AA AA AA AA AA  ;........
 E7A8		.byte AA AA AA AA AA AA AA AA  ;........
 E7B0		.byte AA AA AA AA AA AA AA AA  ;........
 E7B8		.byte AA AA AA AA AA AA AA AA  ;........
 E7C0		.byte AA AA AA AA AA AA AA AA  ;........
 E7C8		.byte AA AA AA AA AA AA AA AA  ;........
 E7D0		.byte AA AA AA AA AA AA AA AA  ;........
 E7D8		.byte AA AA AA AA AA AA AA AA  ;........
 E7E0		.byte AA AA AA AA AA AA AA AA  ;........
 E7E8		.byte AA AA AA AA AA AA AA AA  ;........
 E7F0		.byte AA AA AA AA AA AA AA AA  ;........
 E7F8		.byte AA AA AA AA AA AA AA AA  ;........
